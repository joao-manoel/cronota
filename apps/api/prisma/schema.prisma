generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountProvider {
  GOOGLE
}

enum WalletType {
  PERSONAL
  ORGANIZATIONAL
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionStatusType {
  paid
  pending
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  ADMIN
  MEMBER
}

enum TokenType {
  PASSWORD_RECOVER
}

enum SubscriptionType {
  NONE
  ACTIVE
  CANCELLED
}

enum IconCardType {
  CARTEIRA
  NUBANK
  BB
  ITAU
  SICREDI
  BRADESCO
  SANTANDER
  CAIXA
  INTER
  C6BANK
  NEXT
  NEON
  PAN
  PICPAY
  INFINITYPAY
  ITI
  MERCADOPAGO
  PAGSEGURO
}

enum RecurrenceType {
  VARIABLE
  MONTH
  YEAR
}

model User {
  id           String           @id @default(uuid())
  name         String?
  email        String           @unique
  passwordHash String?          @map("password_hash")
  avatarUrl    String?          @map("avatar_url")
  subscription SubscriptionType @default(NONE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Wallet       Wallet[]
  Account      Account[]
  Organization Organization[]
  Member       Member[]
  Invite       Invite[]
  Token        Token[]
  Card         Card[]
  Categorys    Categorys[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Invite {
  id        String       @id @default(uuid())
  email     String
  role      Role
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User     @relation(fields: [ownerId], references: [id])
  ownerId String   @map("owner_id")
  Member  Member[]
  Invite  Invite[]
  Wallet  Wallet[]

  @@map("organizations")
}

model Wallet {
  id        String     @id @default(uuid())
  name      String
  slug      String     @default("null")
  type      WalletType @default(PERSONAL)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  owner   User?  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?       @map("organization_id")

  transaction Transaction[]
  card        Card[]
  Categorys   Categorys[]

  @@map("wallets")
}

model Card {
  id        String       @id @default(uuid())
  name      String
  limit     Int          @default(0)
  icon      IconCardType @default(CARTEIRA)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @map("wallet_id")

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @map("owner_id")

  Transaction Transaction[]
}

model Transaction {
  id         String                @id @default(uuid())
  title      String
  amount     Int
  type       TransactionType       @default(INCOME)
  recurrence RecurrenceType        @default(VARIABLE)
  payDate    DateTime              @map("pay_date")
  status     TransactionStatusType @default(pending)

  category   Categorys @relation(fields: [categoryId], references: [id])
  categoryId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String @map("wallet_id")

  card   Card   @relation(fields: [cardId], references: [id])
  cardId String @map("card_id")

  installments Installments[]

  @@map("transactions")
}

model Installments {
  id          String                @id @default(uuid())
  installment Int
  status      TransactionStatusType
  isRecurring Boolean               @default(false) @map("is_recurring")
  payDate     DateTime?             @map("pay_date")
  paidAt      DateTime?             @map("paid_at")

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String

  @@map("installment")
}

model Categorys {
  id              String          @id @default(uuid())
  title           String
  icon            String
  transactionType TransactionType @map("transaction_type")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  isCategoryUser  Boolean         @default(false) @map("is_category_user")

  owner  User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  wallet   Wallet? @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId String?

  transaction Transaction[]

  @@map("categorys")
}
